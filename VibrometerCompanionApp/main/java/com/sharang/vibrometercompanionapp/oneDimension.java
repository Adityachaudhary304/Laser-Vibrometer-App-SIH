package com.sharang.vibrometercompanionapp;

import androidx.annotation.ColorRes;
import androidx.appcompat.app.AppCompatActivity;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.components.Description;
import com.github.mikephil.charting.components.LimitLine;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.data.LineData;
import com.github.mikephil.charting.data.LineDataSet;
import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;
import com.paramsen.noise.Noise;
import org.jtransforms.fft.DoubleFFT_1D;

import static java.lang.Math.sqrt;




import java.io.IOException;
import java.util.ArrayList;
import java.util.Set;
import java.util.UUID;

public class oneDimension extends AppCompatActivity {

    private static final int REQUEST_ENABLE_BT = 0;
    BluetoothDevice mmDevice;
    BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
    private BluetoothServerSocket mmServerSocket;
    final String BT_NAME = bluetoothAdapter.getName();
    final UUID MY_UUID = UUID.fromString("f546a3fa-9c10-11ea-bb37-0242ac130002");
    LineChart mpLineChart1;
    LineChart mpLineChart2;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.one_dimension);

//        // Get the screen's density scale
//        final float scale = getResources().getDisplayMetrics().density;
//        final float wid = getResources().getDisplayMetrics().widthPixels;
//        double siz= wid*0.5;

        Button back_button=(Button)findViewById(R.id.button4);
//        Spinner spin1d = (Spinner)findViewById(R.id.spinner1);
        TextView Txt = (TextView)findViewById(R.id.textView9);

        mpLineChart1 = (LineChart) findViewById(R.id.chart1);
        LineDataSet lineDataset1 =new LineDataSet(dataValues1(),"Data Set 1");
        ArrayList<ILineDataSet> dataSets = new ArrayList<>();
        dataSets.add(lineDataset1);
        LineData data = new LineData(dataSets);
        mpLineChart1.setData(data);
        lineDataset1.setLineWidth(3f);
        lineDataset1.setDrawCircles(false);
        lineDataset1.setDrawCircleHole(false);
        //LimitLine xLimit = new LimitLine(150f);
        Description description = new Description();
        description.setText("After FFT of data");
        description.setTextSize(15);
        description.setTextColor(Color.BLUE);
        mpLineChart1.setDescription(description);
        mpLineChart1.setDrawBorders(true);
        mpLineChart1.setBorderWidth(2);
        mpLineChart1.setBorderColor(Color.BLACK);
        lineDataset1.setColor(Color.RED);
        mpLineChart1.getAxisRight().setEnabled(false);

        mpLineChart2 = (LineChart) findViewById(R.id.chart2);
        LineDataSet lineDataset2 =new LineDataSet(dataValues2(),"Data Set 2");
        ArrayList<ILineDataSet> dataSets2 = new ArrayList<>();
        dataSets2.add(lineDataset2);
        LineData data2 = new LineData(dataSets2);
        mpLineChart2.setData(data2);
        lineDataset2.setLineWidth(3f);
        lineDataset2.setColor(Color.YELLOW);
        mpLineChart2.setDrawBorders(true);
        mpLineChart2.setBorderWidth(2);
        mpLineChart2.setBorderColor(Color.BLACK);
        Description description2 = new Description();
        description2.setText("Actual Data");
        description2.setTextSize(15);
        description2.setTextColor(Color.BLUE);
        mpLineChart2.setDescription(description2);


        Txt.setVisibility(View.VISIBLE);

        ArrayAdapter<CharSequence> adapter1d = ArrayAdapter.createFromResource(this,R.array.spin1d, android.R.layout.simple_spinner_item);

        // Specify the layout to use when the list of choices appears
        adapter1d.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

        // Apply the adapter to the spinner
//        spin1d.setAdapter(adapter1d);

        openBT();

        /*spin1d.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView adapter1d, View spin1d,int pos, long id) {
                // An item was selected. You can retrieve the selected item using
                Log.d("LOGTAG", "hhhhh" + adapter1d.getItemAtPosition(pos));
                adapter1d.getItemAtPosition(pos );
                mpLineChart1.invalidate();
            }

            @Override
            public void onNothingSelected(AdapterView adapter1d) {
                Log.d("TAG", "Nothing selected");
            }
        });*/



        back_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                finish();
            }
        });

    }

    private ArrayList<Entry> dataValues2(){
//        Noise noise = Noise.real(500) ;
        int L = 300 ;
        DoubleFFT_1D fft = new DoubleFFT_1D(L);
        Log.d("TAG", "at 151");
        float[] dst= new float[502];
        float x = 0f;
        //matlab fft data
//        float y2 [] = {0.0688f ,0.0335f ,0.1047f ,0.2059f ,0.0494f ,0.1523f ,0.0744f ,0.0653f ,0.1298f ,0.0952f ,0.0962f ,0.0735f ,0.0908f ,0.1619f ,0.0740f ,0.0259f ,0.1361f ,0.1044f ,0.1001f ,0.1411f ,0.0850f ,0.1514f ,0.0688f ,0.0312f ,0.1365f ,0.0899f ,0.1271f ,0.1035f ,0.0359f ,0.0531f ,0.1388f ,0.0372f ,0.0520f ,0.1527f ,0.1268f ,0.2034f ,0.0840f ,0.0259f ,0.0346f ,0.1297f ,0.0395f ,0.0827f ,0.0492f ,0.0574f ,0.1183f ,0.1013f ,0.0466f ,0.0720f ,0.0650f ,0.0485f ,0.0922f ,0.0987f ,0.0292f ,0.0785f ,0.1077f ,0.0926f ,0.0554f ,0.1838f ,0.1794f ,0.0229f ,0.0324f ,0.0545f ,0.0243f ,0.1048f ,0.0870f ,0.1528f ,0.1430f ,0.1064f ,0.2366f ,0.0556f ,0.1535f ,0.0997f ,0.0735f ,0.1091f ,0.0814f ,0.0571f ,0.0677f ,0.0693f ,0.1136f ,0.0623f ,0.1062f ,0.1098f ,0.0544f ,0.0262f ,0.0745f ,0.0316f ,0.1576f ,0.0792f ,0.0562f ,0.1162f ,0.0570f ,0.0291f ,0.0991f ,0.0614f ,0.0332f ,0.1904f ,0.0825f ,0.0677f ,0.0921f ,0.0656f ,0.0309f ,0.0351f ,0.1315f ,0.2137f ,0.0449f ,0.0832f ,0.0437f ,0.0453f ,0.0632f ,0.1501f ,0.0744f ,0.0667f ,0.0317f ,0.1492f ,0.1049f ,0.0783f ,0.1872f ,0.0715f ,0.1237f ,0.0103f ,0.2547f ,0.1223f ,0.0800f ,0.0688f ,0.1341f ,0.1305f ,0.0453f ,0.0884f ,0.0356f ,0.0770f ,0.0187f ,0.0761f ,0.0778f ,0.0881f ,0.0635f ,0.1216f ,0.0872f ,0.1461f ,0.0691f ,0.0900f ,0.1598f ,0.0276f ,0.0633f ,0.1072f ,0.0334f ,0.0930f ,0.1073f ,0.0536f ,0.1773f ,0.0632f ,0.1320f ,0.2367f ,0.0847f ,0.0374f ,0.1317f ,0.1487f ,0.1496f ,0.0451f ,0.1112f ,0.0740f ,0.0324f ,0.0894f ,0.0446f ,0.2136f ,0.0792f ,0.1418f ,0.1183f ,0.0824f ,0.1139f ,0.0737f ,0.0373f ,0.0960f ,0.0804f ,0.0514f ,0.0621f ,0.1119f ,0.0705f ,0.1904f ,0.0462f ,0.0934f ,0.9762f ,0.0580f ,0.0775f ,0.0922f ,0.0652f ,0.2016f ,0.1280f ,0.1491f ,0.0439f ,0.0835f ,0.0807f ,0.1626f ,0.1273f ,0.0324f ,0.0953f ,0.1063f ,0.1366f ,0.0068f ,0.1166f ,0.0994f ,0.1284f ,0.0448f ,0.1663f ,0.0980f ,0.0454f ,0.0454f ,0.0826f ,0.0763f ,0.0878f ,0.0981f ,0.1719f ,0.1157f ,0.0568f ,0.0661f ,0.0426f ,0.0669f ,0.0759f ,0.0416f ,0.0473f ,0.1443f ,0.0990f ,0.0548f ,0.0624f ,0.1497f ,0.0283f ,0.1923f ,0.0521f ,0.0276f ,0.1606f ,0.0563f ,0.1127f ,0.0833f ,0.1208f ,0.2763f ,0.0580f ,0.0639f ,0.0681f ,0.0732f ,0.0582f ,0.0744f ,0.1996f ,0.0426f ,0.1425f ,0.1223f ,0.1580f ,0.0923f ,0.0805f ,0.0811f ,0.1722f ,0.1297f ,0.0269f ,0.2011f ,0.1350f ,0.1034f ,0.2177f ,0.1262f ,0.0203f ,0.1406f ,0.0399f ,0.1253f ,0.1096f ,0.0945f ,0.0949f ,0.1284f ,0.2215f ,0.0109f ,0.0579f ,0.0693f ,0.0565f ,0.1057f ,0.0613f ,0.0903f ,0.1362f ,0.0662f ,0.0824f ,0.1333f ,0.0477f ,0.0534f ,0.1796f ,0.0797f ,0.0431f ,0.1358f ,0.0730f ,0.1349f ,0.1051f ,0.0226f ,0.1262f ,0.1569f ,0.0517f ,0.0387f ,0.1242f ,0.1818f ,0.1696f ,0.0839f ,0.0604f ,0.1123f ,0.0276f ,0.0778f ,0.1046f ,0.0533f ,0.1316f ,0.0474f ,0.1120f ,0.1116f ,0.0398f ,0.0845f ,0.0610f ,0.0786f ,0.0702f ,0.1020f ,0.0812f ,0.0765f ,0.1223f ,0.0782f ,0.0897f ,0.0836f ,0.0111f ,0.1322f ,0.0953f ,0.0931f ,0.0656f ,0.0866f ,0.1209f ,0.0850f ,0.0051f ,0.1180f ,0.1410f ,0.1591f ,0.0850f ,0.1082f ,0.0285f ,0.0550f ,0.1007f ,0.0852f ,0.0877f ,0.0714f ,0.1403f ,0.0906f ,0.0861f ,0.0746f ,0.0308f ,0.1410f ,0.0635f ,0.0493f ,0.0382f ,0.1000f ,0.0589f ,0.2783f ,0.0341f ,0.1187f ,0.0559f ,0.1669f ,0.0669f ,0.0527f ,0.0523f ,0.1413f ,0.0165f ,0.0079f ,0.1095f ,0.1305f ,0.0324f ,0.0930f ,0.1067f ,0.0442f ,0.1239f ,0.1343f ,0.0524f ,0.2231f ,0.0665f ,0.1505f ,0.0943f ,0.0686f ,0.0766f ,0.1255f ,0.0668f ,0.0098f ,0.0485f ,0.0500f ,0.1047f ,0.1413f ,0.1021f ,0.1269f ,0.1466f ,0.0500f ,0.1030f ,0.1037f ,0.1344f ,0.0614f ,0.0672f ,0.0039f ,0.0629f ,0.1307f ,0.0333f ,0.0229f ,0.0460f ,0.1078f ,0.1387f ,0.0350f ,0.1396f ,0.0712f ,0.0494f ,0.1005f ,0.0213f ,0.0728f ,0.0529f ,0.1523f ,0.0465f ,0.0482f ,0.0751f ,0.1204f ,0.0474f ,0.0720f ,0.1283f ,0.0426f ,0.0166f ,0.1066f ,0.0994f ,0.1416f ,0.0830f ,0.0267f ,0.0378f ,0.0778f ,0.1007f ,0.0576f ,0.0242f ,0.0388f ,0.1875f ,0.1738f ,0.2227f ,0.0685f ,0.0241f ,0.0570f ,0.1179f ,0.1206f ,0.1334f ,0.0801f ,0.0512f ,0.0401f ,0.1220f ,0.1166f ,0.1067f ,0.0753f ,0.1025f ,0.0535f ,0.0552f ,0.0926f ,0.1406f ,0.0734f ,0.0480f ,0.1529f ,0.1541f ,0.0797f ,0.0522f ,0.1011f ,0.0738f ,0.0721f ,0.1031f ,0.1215f ,0.0916f ,0.0558f ,0.0780f ,0.1010f ,0.1236f ,0.1213f ,0.0624f ,0.2372f ,0.0923f ,0.0494f ,0.0595f ,0.0850f ,0.1216f ,0.0333f ,0.0950f ,0.0823f ,0.1308f ,0.1094f ,0.1251f ,0.0485f ,0.0832f ,0.1644f ,0.0752f ,0.1377f ,0.0540f ,0.1609f ,0.1049f ,0.0565f ,0.0920f ,0.0092f ,0.0840f ,0.0954f ,0.0645f ,0.0361f ,0.0640f ,0.0638f ,0.0119f ,0.0810f ,0.1090f ,0.2010f ,0.0515f ,0.0888f ,0.0318f ,0.1345f ,0.0415f ,0.1200f ,0.0694f ,0.0184f ,0.1083f ,0.0968f ,0.0972f ,0.1327f ,0.0674f ,0.1771f ,0.1515f ,0.0969f ,0.1131f ,0.0318f ,0.1093f ,0.0664f ,0.1226f ,0.1027f ,0.0884f ,0.1520f ,0.0328f ,0.0962f ,0.1157f ,0.1232f ,0.1406f ,0.0323f ,0.0515f ,0.1092f ,0.0798f ,0.0534f ,0.0634f ,0.0196f ,0.0950f ,0.1915f ,0.0876f ,0.0449f ,0.0966f ,0.0687f ,0.0819f ,0.0754f ,0.0815f ,0.1289f ,0.0462f ,0.0368f ,0.1548f ,0.0561f ,0.0993f ,0.1362f ,0.0746f ,0.1017f ,0.0024f ,0.1027f ,0.1299f ,0.0825f ,0.1162f ,0.1781f ,0.2045f ,0.0584f ,0.1089f ,0.0366f ,0.1030f ,0.0686f ,0.1835f ,0.0455f ,0.0412f ,0.0663f ,0.0626f ,0.0464f ,0.0481f ,0.0561f ,0.0568f ,0.0677f ,0.1504f ,0.0357f ,0.0252f ,0.0928f ,0.0887f ,0.0621f ,0.1002f ,0.0962f ,0.0886f ,0.0975f ,0.0879f ,0.0489f ,0.0683f ,0.1276f ,0.1207f ,0.0796f ,0.0879f ,0.0570f ,0.0634f ,0.0891f ,0.1283f ,0.0975f ,0.0306f ,0.0842f ,0.1782f ,0.1614f ,0.0915f ,0.0947f ,0.0357f ,0.0953f ,0.0662f ,0.1732f ,0.0986f ,0.1901f ,0.0842f ,0.0398f ,0.0487f ,0.0540f ,0.0997f ,0.0641f ,0.0344f ,0.0880f ,0.0792f ,0.0079f ,0.0384f ,0.0504f ,0.1501f ,0.0536f ,0.2787f ,0.0891f ,0.1291f ,0.0780f ,0.1512f ,0.0689f ,0.1732f ,0.1287f ,0.0610f ,0.0057f ,0.1142f ,0.1443f ,0.2189f ,0.0605f ,0.1136f ,0.0620f ,0.1298f ,0.0218f ,0.0749f ,0.1105f ,0.0786f ,0.0901f ,0.0943f ,0.0712f ,0.1182f ,0.1207f ,0.2293f ,0.0369f ,0.1296f ,0.1571f ,0.0702f ,0.0823f ,0.0285f ,0.1065f ,0.2052f ,0.0358f ,0.1008f ,0.0705f ,0.1101f ,0.1025f ,0.0573f ,0.0495f ,0.0325f ,0.2283f ,0.0151f ,0.1351f ,0.0704f ,0.0773f ,0.0313f ,0.1082f ,0.0897f ,0.0981f ,0.0996f ,0.1623f ,0.1808f ,0.0210f ,0.0871f ,0.1286f ,0.1502f ,0.0966f ,0.1260f ,0.1216f ,0.0267f ,0.0801f ,0.1249f ,0.1568f ,0.1159f ,0.0769f ,0.0206f ,0.0934f ,0.0141f ,0.0400f ,0.1426f ,0.0604f ,0.0249f ,0.1259f ,0.0958f ,0.0309f ,0.1669f ,0.0830f ,0.1098f ,0.0452f ,0.0706f ,0.1090f ,0.0963f ,0.0657f ,0.0659f ,0.1255f ,0.0362f ,0.1227f ,0.0722f ,0.0664f ,0.0273f ,0.1035f ,0.1763f ,0.1579f ,0.1270f ,0.0864f ,0.0533f ,0.0622f ,0.1972f ,0.1337f ,0.1226f ,0.0868f ,0.1697f ,0.0754f ,0.0627f ,0.1516f ,0.0948f ,0.0567f ,0.1263f ,0.2018f ,0.0400f ,0.0789f ,0.0508f ,0.0875f ,0.0313f ,0.0391f ,0.1180f ,0.1445f ,0.0266f ,0.1663f ,0.1360f ,0.0801f ,0.0900f ,0.1025f ,0.0663f ,0.0672f ,0.0651f } ;

        //compute data
        double y2[] = {0.0688, 0.0335, 0.1047, 0.2059, 0.0494, 0.1523, 0.0744, 0.0653, 0.1298, 0.0952, 0.0962, 0.0735, 0.0908, 0.1619, 0.074, 0.0259, 0.1361, 0.1044, 0.1001, 0.1411, 0.085, 0.1514, 0.0688, 0.0312, 0.1365, 0.0899, 0.1271, 0.1035, 0.0359, 0.0531, 0.1388, 0.0372, 0.052, 0.1527, 0.1268, 0.2034, 0.084, 0.0259, 0.0346, 0.1297, 0.0395, 0.0827, 0.0492, 0.0574, 0.1183, 0.1013, 0.0466, 0.072, 0.065, 0.0485, 0.0922, 0.0987, 0.0292, 0.0785, 0.1077, 0.0926, 0.0554, 0.1838, 0.1794, 0.0229, 0.0324, 0.0545, 0.0243, 0.1048, 0.087, 0.1528, 0.143, 0.1064, 0.2366, 0.0556, 0.1535, 0.0997, 0.0735, 0.1091, 0.0814, 0.0571, 0.0677, 0.0693, 0.1136, 0.0623, 0.1062, 0.1098, 0.0544, 0.0262, 0.0745, 0.0316, 0.1576, 0.0792, 0.0562, 0.1162, 0.057, 0.0291, 0.0991, 0.0614, 0.0332, 0.1904, 0.0825, 0.0677, 0.0921, 0.0656, 0.0309, 0.0351, 0.1315, 0.2137, 0.0449, 0.0832, 0.0437, 0.0453, 0.0632, 0.1501, 0.0744, 0.0667, 0.0317, 0.1492, 0.1049, 0.0783, 0.1872, 0.0715, 0.1237, 0.0103, 0.2547, 0.1223, 0.08, 0.0688, 0.1341, 0.1305, 0.0453, 0.0884, 0.0356, 0.077, 0.0187, 0.0761, 0.0778, 0.0881, 0.0635, 0.1216, 0.0872, 0.1461, 0.0691, 0.09, 0.1598, 0.0276, 0.0633, 0.1072, 0.0334, 0.093, 0.1073, 0.0536, 0.1773, 0.0632, 0.132, 0.2367, 0.0847, 0.0374, 0.1317, 0.1487, 0.1496, 0.0451, 0.1112, 0.074, 0.0324, 0.0894, 0.0446, 0.2136, 0.0792, 0.1418, 0.1183, 0.0824, 0.1139, 0.0737, 0.0373, 0.096, 0.0804, 0.0514, 0.0621, 0.1119, 0.0705, 0.1904, 0.0462, 0.0934, 0.9762, 0.058, 0.0775, 0.0922, 0.0652, 0.2016, 0.128, 0.1491, 0.0439, 0.0835, 0.0807, 0.1626, 0.1273, 0.0324, 0.0953, 0.1063, 0.1366, 0.0068, 0.1166, 0.0994, 0.1284, 0.0448, 0.1663, 0.098, 0.0454, 0.0454, 0.0826, 0.0763, 0.0878, 0.0981, 0.1719, 0.1157, 0.0568, 0.0661, 0.0426, 0.0669, 0.0759, 0.0416, 0.0473, 0.1443, 0.099, 0.0548, 0.0624, 0.1497, 0.0283, 0.1923, 0.0521, 0.0276, 0.1606, 0.0563, 0.1127, 0.0833, 0.1208, 0.2763, 0.058, 0.0639, 0.0681, 0.0732, 0.0582, 0.0744, 0.1996, 0.0426, 0.1425, 0.1223, 0.158, 0.0923, 0.0805, 0.0811, 0.1722, 0.1297, 0.0269, 0.2011, 0.135, 0.1034, 0.2177, 0.1262, 0.0203, 0.1406, 0.0399, 0.1253, 0.1096, 0.0945, 0.0949, 0.1284, 0.2215, 0.0109, 0.0579, 0.0693, 0.0565, 0.1057, 0.0613, 0.0903, 0.1362, 0.0662, 0.0824, 0.1333, 0.0477, 0.0534, 0.1796, 0.0797, 0.0431, 0.1358, 0.073, 0.1349, 0.1051, 0.0226, 0.1262, 0.1569, 0.0517, 0.0387, 0.1242, 0.1818, 0.1696, 0.0839, 0.0604, 0.1123, 0.0276, 0.0778, 0.1046, 0.0533, 0.1316, 0.0474, 0.112, 0.1116, 0.0398, 0.0845, 0.061, 0.0786, 0.0702, 0.102, 0.0812, 0.0765, 0.1223, 0.0782, 0.0897, 0.0836, 0.0111, 0.1322, 0.0953, 0.0931, 0.0656, 0.0866, 0.1209, 0.085, 0.0051, 0.118, 0.141, 0.1591, 0.085, 0.1082, 0.0285, 0.055, 0.1007, 0.0852, 0.0877, 0.0714, 0.1403, 0.0906, 0.0861, 0.0746, 0.0308, 0.141, 0.0635, 0.0493, 0.0382, 0.1, 0.0589, 0.2783, 0.0341, 0.1187, 0.0559, 0.1669, 0.0669, 0.0527, 0.0523, 0.1413, 0.0165, 0.0079, 0.1095, 0.1305, 0.0324, 0.093, 0.1067, 0.0442, 0.1239, 0.1343, 0.0524, 0.2231, 0.0665, 0.1505, 0.0943, 0.0686, 0.0766, 0.1255, 0.0668, 0.0098, 0.0485, 0.05, 0.1047, 0.1413, 0.1021, 0.1269, 0.1466, 0.05, 0.103, 0.1037, 0.1344, 0.0614, 0.0672, 0.0039, 0.0629, 0.1307, 0.0333, 0.0229, 0.046, 0.1078, 0.1387, 0.035, 0.1396, 0.0712, 0.0494, 0.1005, 0.0213, 0.0728, 0.0529, 0.1523, 0.0465, 0.0482, 0.0751, 0.1204, 0.0474, 0.072, 0.1283, 0.0426, 0.0166, 0.1066, 0.0994, 0.1416, 0.083, 0.0267, 0.0378, 0.0778, 0.1007, 0.0576, 0.0242, 0.0388, 0.1875, 0.1738, 0.2227, 0.0685, 0.0241, 0.057, 0.1179, 0.1206, 0.1334, 0.0801, 0.0512, 0.0401, 0.122, 0.1166, 0.1067, 0.0753, 0.1025, 0.0535, 0.0552, 0.0926, 0.1406, 0.0734, 0.048, 0.1529, 0.1541, 0.0797, 0.0522, 0.1011, 0.0738, 0.0721, 0.1031, 0.1215, 0.0916, 0.0558, 0.078, 0.101, 0.1236, 0.1213, 0.0624, 0.2372, 0.0923, 0.0494, 0.0595, 0.085, 0.1216, 0.0333, 0.095, 0.0823, 0.1308, 0.1094, 0.1251, 0.0485, 0.0832, 0.1644, 0.0752, 0.1377, 0.054, 0.1609, 0.1049, 0.0565, 0.092, 0.0092, 0.084, 0.0954, 0.0645, 0.0361, 0.064, 0.0638, 0.0119, 0.081, 0.109, 0.201, 0.0515, 0.0888, 0.0318, 0.1345, 0.0415, 0.12, 0.0694, 0.0184, 0.1083, 0.0968, 0.0972, 0.1327, 0.0674, 0.1771, 0.1515, 0.0969, 0.1131, 0.0318, 0.1093, 0.0664, 0.1226, 0.1027, 0.0884, 0.152, 0.0328, 0.0962, 0.1157, 0.1232, 0.1406, 0.0323, 0.0515, 0.1092, 0.0798, 0.0534, 0.0634, 0.0196, 0.095, 0.1915, 0.0876, 0.0449, 0.0966, 0.0687, 0.0819, 0.0754, 0.0815, 0.1289, 0.0462, 0.0368, 0.1548, 0.0561, 0.0993, 0.1362, 0.0746, 0.1017, 0.0024, 0.1027, 0.1299, 0.0825, 0.1162, 0.1781, 0.2045, 0.0584, 0.1089, 0.0366, 0.103, 0.0686, 0.1835, 0.0455, 0.0412, 0.0663, 0.0626, 0.0464, 0.0481, 0.0561, 0.0568, 0.0677, 0.1504, 0.0357, 0.0252, 0.0928, 0.0887, 0.0621, 0.1002, 0.0962, 0.0886, 0.0975, 0.0879, 0.0489, 0.0683, 0.1276, 0.1207, 0.0796, 0.0879, 0.057, 0.0634, 0.0891, 0.1283, 0.0975, 0.0306, 0.0842, 0.1782, 0.1614, 0.0915, 0.0947, 0.0357, 0.0953, 0.0662, 0.1732, 0.0986, 0.1901, 0.0842, 0.0398, 0.0487, 0.054, 0.0997, 0.0641, 0.0344, 0.088, 0.0792, 0.0079, 0.0384, 0.0504, 0.1501, 0.0536, 0.2787, 0.0891, 0.1291, 0.078, 0.1512, 0.0689, 0.1732, 0.1287, 0.061, 0.0057, 0.1142, 0.1443, 0.2189, 0.0605, 0.1136, 0.062, 0.1298, 0.0218, 0.0749, 0.1105, 0.0786, 0.0901, 0.0943, 0.0712, 0.1182, 0.1207, 0.2293, 0.0369, 0.1296, 0.1571, 0.0702, 0.0823, 0.0285, 0.1065, 0.2052, 0.0358, 0.1008, 0.0705, 0.1101, 0.1025, 0.0573, 0.0495, 0.0325, 0.2283, 0.0151, 0.1351, 0.0704, 0.0773, 0.0313, 0.1082, 0.0897, 0.0981, 0.0996, 0.1623, 0.1808, 0.021, 0.0871, 0.1286, 0.1502, 0.0966, 0.126, 0.1216, 0.0267, 0.0801, 0.1249, 0.1568, 0.1159, 0.0769, 0.0206, 0.0934, 0.0141, 0.04, 0.1426, 0.0604, 0.0249, 0.1259, 0.0958, 0.0309, 0.1669, 0.083, 0.1098, 0.0452, 0.0706, 0.109, 0.0963, 0.0657, 0.0659, 0.1255, 0.0362, 0.1227, 0.0722, 0.0664, 0.0273, 0.1035, 0.1763, 0.1579, 0.127, 0.0864, 0.0533, 0.0622, 0.1972, 0.1337, 0.1226, 0.0868, 0.1697, 0.0754, 0.0627, 0.1516, 0.0948, 0.0567, 0.1263, 0.2018, 0.04, 0.0789, 0.0508, 0.0875, 0.0313, 0.0391, 0.118, 0.1445, 0.0266, 0.1663, 0.136, 0.0801, 0.09, 0.1025, 0.0663, 0.0672, 0.0651};
//        double x[] = {};

        fft.complexForward(y2);
        float[] P2 = new float[L];
        Log.d("TAG", "after fft calc");
        for(int i=0; i<L; i++){

            float re = (float) y2[2*i]/L;
            float im = (float) y2[2*i+1]/L;
            P2[i] = (float) sqrt(re*re + im*im);
        }

        float[] P1 = new float[L/2]; // single-sided: the second half of P2 has the same values as the first half
        System.arraycopy(P2, 0, P1, 0, L/2);
        // P1(2:end-1) = 2*P1(2:end-1);
        System.arraycopy(P1, 1, P1, 1, L/2-2);
        for(int i=1; i<P1.length-1; i++){
            P1[i] = 2*P1[i];
        }
        Log.d("TAG", "at fft reshape");

//        float fft1[] = noise.fft(y2,dst);

        ArrayList<Entry> dataVals= new ArrayList<Entry>();
        Log.d("TAG", "at data entry ");

        for(int i = 0; i < P1.length / 2; i++) {
            float real = P1[i * 2];
//            float imaginary = fft[i * 2 + 1];
            x=x+1;
            dataVals.add(new Entry(x , real));
            //System.out.printf("index: %d, real: %.5f, imaginary: %.5f\n", i, real, imaginary);
        }

//        for(int j=0;j<3;j++){
//            for (int i=0; i<500 ;i++){
//                x=x+1;
//                dataVals.add(new Entry(x, y2[i]));
//
//            }
//        }

        return dataVals;
    }



    private ArrayList<Entry> dataValues1()
    {
        float o[] = {0.0000f ,0.6667f ,1.3333f ,2.0000f ,2.6667f ,3.3333f ,4.0000f ,4.6667f ,5.3333f ,6.0000f ,6.6667f ,7.3333f ,8.0000f ,8.6667f ,9.3333f ,10.0000f ,10.6667f ,11.3333f ,12.0000f ,12.6667f ,13.3333f ,14.0000f ,14.6667f ,15.3333f ,16.0000f ,16.6667f ,17.3333f ,18.0000f ,18.6667f ,19.3333f ,20.0000f ,20.6667f ,21.3333f ,22.0000f ,22.6667f ,23.3333f ,24.0000f ,24.6667f ,25.3333f ,26.0000f ,26.6667f ,27.3333f ,28.0000f ,28.6667f ,29.3333f ,30.0000f ,30.6667f ,31.3333f ,32.0000f ,32.6667f ,33.3333f ,34.0000f ,34.6667f ,35.3333f ,36.0000f ,36.6667f ,37.3333f ,38.0000f ,38.6667f ,39.3333f ,40.0000f ,40.6667f ,41.3333f ,42.0000f ,42.6667f ,43.3333f ,44.0000f ,44.6667f ,45.3333f ,46.0000f ,46.6667f ,47.3333f ,48.0000f ,48.6667f ,49.3333f ,50.0000f ,50.6667f ,51.3333f ,52.0000f ,52.6667f ,53.3333f ,54.0000f ,54.6667f ,55.3333f ,56.0000f ,56.6667f ,57.3333f ,58.0000f ,58.6667f ,59.3333f ,60.0000f ,60.6667f ,61.3333f ,62.0000f ,62.6667f ,63.3333f ,64.0000f ,64.6667f ,65.3333f ,66.0000f ,66.6667f ,67.3333f ,68.0000f ,68.6667f ,69.3333f ,70.0000f ,70.6667f ,71.3333f ,72.0000f ,72.6667f ,73.3333f ,74.0000f ,74.6667f ,75.3333f ,76.0000f ,76.6667f ,77.3333f ,78.0000f ,78.6667f ,79.3333f ,80.0000f ,80.6667f ,81.3333f ,82.0000f ,82.6667f ,83.3333f ,84.0000f ,84.6667f ,85.3333f ,86.0000f ,86.6667f ,87.3333f ,88.0000f ,88.6667f ,89.3333f ,90.0000f ,90.6667f ,91.3333f ,92.0000f ,92.6667f ,93.3333f ,94.0000f ,94.6667f ,95.3333f ,96.0000f ,96.6667f ,97.3333f ,98.0000f ,98.6667f ,99.3333f ,100.0000f ,100.6667f ,101.3333f ,102.0000f ,102.6667f ,103.3333f ,104.0000f ,104.6667f ,105.3333f ,106.0000f ,106.6667f ,107.3333f ,108.0000f ,108.6667f ,109.3333f ,110.0000f ,110.6667f ,111.3333f ,112.0000f ,112.6667f ,113.3333f ,114.0000f ,114.6667f ,115.3333f ,116.0000f ,116.6667f ,117.3333f ,118.0000f ,118.6667f ,119.3333f ,120.0000f ,120.6667f ,121.3333f ,122.0000f ,122.6667f ,123.3333f ,124.0000f ,124.6667f ,125.3333f ,126.0000f ,126.6667f ,127.3333f ,128.0000f ,128.6667f ,129.3333f ,130.0000f ,130.6667f ,131.3333f ,132.0000f ,132.6667f ,133.3333f ,134.0000f ,134.6667f ,135.3333f ,136.0000f ,136.6667f ,137.3333f ,138.0000f ,138.6667f ,139.3333f ,140.0000f ,140.6667f ,141.3333f ,142.0000f ,142.6667f ,143.3333f ,144.0000f ,144.6667f ,145.3333f ,146.0000f ,146.6667f ,147.3333f ,148.0000f ,148.6667f ,149.3333f ,150.0000f ,150.6667f ,151.3333f ,152.0000f ,152.6667f ,153.3333f ,154.0000f ,154.6667f ,155.3333f ,156.0000f ,156.6667f ,157.3333f ,158.0000f ,158.6667f ,159.3333f ,160.0000f ,160.6667f ,161.3333f ,162.0000f ,162.6667f ,163.3333f ,164.0000f ,164.6667f ,165.3333f ,166.0000f ,166.6667f ,167.3333f ,168.0000f ,168.6667f ,169.3333f ,170.0000f ,170.6667f ,171.3333f ,172.0000f ,172.6667f ,173.3333f ,174.0000f ,174.6667f ,175.3333f ,176.0000f ,176.6667f ,177.3333f ,178.0000f ,178.6667f ,179.3333f ,180.0000f ,180.6667f ,181.3333f ,182.0000f ,182.6667f ,183.3333f ,184.0000f ,184.6667f ,185.3333f ,186.0000f ,186.6667f ,187.3333f ,188.0000f ,188.6667f ,189.3333f ,190.0000f ,190.6667f ,191.3333f ,192.0000f ,192.6667f ,193.3333f ,194.0000f ,194.6667f ,195.3333f ,196.0000f ,196.6667f ,197.3333f ,198.0000f ,198.6667f ,199.3333f ,200.0000f ,200.6667f ,201.3333f ,202.0000f ,202.6667f ,203.3333f ,204.0000f ,204.6667f ,205.3333f ,206.0000f ,206.6667f ,207.3333f ,208.0000f ,208.6667f ,209.3333f ,210.0000f ,210.6667f ,211.3333f ,212.0000f ,212.6667f ,213.3333f ,214.0000f ,214.6667f ,215.3333f ,216.0000f ,216.6667f ,217.3333f ,218.0000f ,218.6667f ,219.3333f ,220.0000f ,220.6667f ,221.3333f ,222.0000f ,222.6667f ,223.3333f ,224.0000f ,224.6667f ,225.3333f ,226.0000f ,226.6667f ,227.3333f ,228.0000f ,228.6667f ,229.3333f ,230.0000f ,230.6667f ,231.3333f ,232.0000f ,232.6667f ,233.3333f ,234.0000f ,234.6667f ,235.3333f ,236.0000f ,236.6667f ,237.3333f ,238.0000f ,238.6667f ,239.3333f ,240.0000f ,240.6667f ,241.3333f ,242.0000f ,242.6667f ,243.3333f ,244.0000f ,244.6667f ,245.3333f ,246.0000f ,246.6667f ,247.3333f ,248.0000f ,248.6667f ,249.3333f ,250.0000f ,250.6667f ,251.3333f ,252.0000f ,252.6667f ,253.3333f ,254.0000f ,254.6667f ,255.3333f ,256.0000f ,256.6667f ,257.3333f ,258.0000f ,258.6667f ,259.3333f ,260.0000f ,260.6667f ,261.3333f ,262.0000f ,262.6667f ,263.3333f ,264.0000f ,264.6667f ,265.3333f ,266.0000f ,266.6667f ,267.3333f ,268.0000f ,268.6667f ,269.3333f ,270.0000f ,270.6667f ,271.3333f ,272.0000f ,272.6667f ,273.3333f ,274.0000f ,274.6667f ,275.3333f ,276.0000f ,276.6667f ,277.3333f ,278.0000f ,278.6667f ,279.3333f ,280.0000f ,280.6667f ,281.3333f ,282.0000f ,282.6667f ,283.3333f ,284.0000f ,284.6667f ,285.3333f ,286.0000f ,286.6667f ,287.3333f ,288.0000f ,288.6667f ,289.3333f ,290.0000f ,290.6667f ,291.3333f ,292.0000f ,292.6667f ,293.3333f ,294.0000f ,294.6667f ,295.3333f ,296.0000f ,296.6667f ,297.3333f ,298.0000f ,298.6667f ,299.3333f ,300.0000f ,300.6667f ,301.3333f ,302.0000f ,302.6667f ,303.3333f ,304.0000f ,304.6667f ,305.3333f ,306.0000f ,306.6667f ,307.3333f ,308.0000f ,308.6667f ,309.3333f ,310.0000f ,310.6667f ,311.3333f ,312.0000f ,312.6667f ,313.3333f ,314.0000f ,314.6667f ,315.3333f ,316.0000f ,316.6667f ,317.3333f ,318.0000f ,318.6667f ,319.3333f ,320.0000f ,320.6667f ,321.3333f ,322.0000f ,322.6667f ,323.3333f ,324.0000f ,324.6667f ,325.3333f ,326.0000f ,326.6667f ,327.3333f ,328.0000f ,328.6667f ,329.3333f ,330.0000f ,330.6667f ,331.3333f ,332.0000f ,332.6667f ,333.3333f ,334.0000f ,334.6667f ,335.3333f ,336.0000f ,336.6667f ,337.3333f ,338.0000f ,338.6667f ,339.3333f ,340.0000f ,340.6667f ,341.3333f ,342.0000f ,342.6667f ,343.3333f ,344.0000f ,344.6667f ,345.3333f ,346.0000f ,346.6667f ,347.3333f ,348.0000f ,348.6667f ,349.3333f ,350.0000f ,350.6667f ,351.3333f ,352.0000f ,352.6667f ,353.3333f ,354.0000f ,354.6667f ,355.3333f ,356.0000f ,356.6667f ,357.3333f ,358.0000f ,358.6667f ,359.3333f ,360.0000f ,360.6667f ,361.3333f ,362.0000f ,362.6667f ,363.3333f ,364.0000f ,364.6667f ,365.3333f ,366.0000f ,366.6667f ,367.3333f ,368.0000f ,368.6667f ,369.3333f ,370.0000f ,370.6667f ,371.3333f ,372.0000f ,372.6667f ,373.3333f ,374.0000f ,374.6667f ,375.3333f ,376.0000f ,376.6667f ,377.3333f ,378.0000f ,378.6667f ,379.3333f ,380.0000f ,380.6667f ,381.3333f ,382.0000f ,382.6667f ,383.3333f ,384.0000f ,384.6667f ,385.3333f ,386.0000f ,386.6667f ,387.3333f ,388.0000f ,388.6667f ,389.3333f ,390.0000f ,390.6667f ,391.3333f ,392.0000f ,392.6667f ,393.3333f ,394.0000f ,394.6667f ,395.3333f ,396.0000f ,396.6667f ,397.3333f ,398.0000f ,398.6667f ,399.3333f ,400.0000f ,400.6667f ,401.3333f ,402.0000f ,402.6667f ,403.3333f ,404.0000f ,404.6667f ,405.3333f ,406.0000f ,406.6667f ,407.3333f ,408.0000f ,408.6667f ,409.3333f ,410.0000f ,410.6667f ,411.3333f ,412.0000f ,412.6667f ,413.3333f ,414.0000f ,414.6667f ,415.3333f ,416.0000f ,416.6667f ,417.3333f ,418.0000f ,418.6667f ,419.3333f ,420.0000f ,420.6667f ,421.3333f ,422.0000f ,422.6667f ,423.3333f ,424.0000f ,424.6667f ,425.3333f ,426.0000f ,426.6667f ,427.3333f ,428.0000f ,428.6667f ,429.3333f ,430.0000f ,430.6667f ,431.3333f ,432.0000f ,432.6667f ,433.3333f ,434.0000f ,434.6667f ,435.3333f ,436.0000f ,436.6667f ,437.3333f ,438.0000f ,438.6667f ,439.3333f ,440.0000f ,440.6667f ,441.3333f ,442.0000f ,442.6667f ,443.3333f ,444.0000f ,444.6667f ,445.3333f ,446.0000f ,446.6667f ,447.3333f ,448.0000f ,448.6667f ,449.3333f ,450.0000f ,450.6667f ,451.3333f ,452.0000f ,452.6667f ,453.3333f ,454.0000f ,454.6667f ,455.3333f ,456.0000f ,456.6667f ,457.3333f ,458.0000f ,458.6667f ,459.3333f ,460.0000f ,460.6667f ,461.3333f ,462.0000f ,462.6667f ,463.3333f ,464.0000f ,464.6667f ,465.3333f ,466.0000f ,466.6667f ,467.3333f ,468.0000f ,468.6667f ,469.3333f ,470.0000f ,470.6667f ,471.3333f ,472.0000f ,472.6667f ,473.3333f ,474.0000f ,474.6667f ,475.3333f ,476.0000f ,476.6667f ,477.3333f ,478.0000f ,478.6667f ,479.3333f ,480.0000f ,480.6667f ,481.3333f ,482.0000f ,482.6667f ,483.3333f ,484.0000f ,484.6667f ,485.3333f ,486.0000f ,486.6667f ,487.3333f ,488.0000f ,488.6667f ,489.3333f ,490.0000f ,490.6667f ,491.3333f ,492.0000f ,492.6667f ,493.3333f ,494.0000f ,494.6667f ,495.3333f ,496.0000f ,496.6667f ,497.3333f ,498.0000f ,498.6667f ,499.3333f ,500.0000f };
            float p[] = {0.0688f ,0.0335f ,0.1047f ,0.2059f ,0.0494f ,0.1523f ,0.0744f ,0.0653f ,0.1298f ,0.0952f ,0.0962f ,0.0735f ,0.0908f ,0.1619f ,0.0740f ,0.0259f ,0.1361f ,0.1044f ,0.1001f ,0.1411f ,0.0850f ,0.1514f ,0.0688f ,0.0312f ,0.1365f ,0.0899f ,0.1271f ,0.1035f ,0.0359f ,0.0531f ,0.1388f ,0.0372f ,0.0520f ,0.1527f ,0.1268f ,0.2034f ,0.0840f ,0.0259f ,0.0346f ,0.1297f ,0.0395f ,0.0827f ,0.0492f ,0.0574f ,0.1183f ,0.1013f ,0.0466f ,0.0720f ,0.0650f ,0.0485f ,0.0922f ,0.0987f ,0.0292f ,0.0785f ,0.1077f ,0.0926f ,0.0554f ,0.1838f ,0.1794f ,0.0229f ,0.0324f ,0.0545f ,0.0243f ,0.1048f ,0.0870f ,0.1528f ,0.1430f ,0.1064f ,0.2366f ,0.0556f ,0.1535f ,0.0997f ,0.0735f ,0.1091f ,0.0814f ,0.0571f ,0.0677f ,0.0693f ,0.1136f ,0.0623f ,0.1062f ,0.1098f ,0.0544f ,0.0262f ,0.0745f ,0.0316f ,0.1576f ,0.0792f ,0.0562f ,0.1162f ,0.0570f ,0.0291f ,0.0991f ,0.0614f ,0.0332f ,0.1904f ,0.0825f ,0.0677f ,0.0921f ,0.0656f ,0.0309f ,0.0351f ,0.1315f ,0.2137f ,0.0449f ,0.0832f ,0.0437f ,0.0453f ,0.0632f ,0.1501f ,0.0744f ,0.0667f ,0.0317f ,0.1492f ,0.1049f ,0.0783f ,0.1872f ,0.0715f ,0.1237f ,0.0103f ,0.2547f ,0.1223f ,0.0800f ,0.0688f ,0.1341f ,0.1305f ,0.0453f ,0.0884f ,0.0356f ,0.0770f ,0.0187f ,0.0761f ,0.0778f ,0.0881f ,0.0635f ,0.1216f ,0.0872f ,0.1461f ,0.0691f ,0.0900f ,0.1598f ,0.0276f ,0.0633f ,0.1072f ,0.0334f ,0.0930f ,0.1073f ,0.0536f ,0.1773f ,0.0632f ,0.1320f ,0.2367f ,0.0847f ,0.0374f ,0.1317f ,0.1487f ,0.1496f ,0.0451f ,0.1112f ,0.0740f ,0.0324f ,0.0894f ,0.0446f ,0.2136f ,0.0792f ,0.1418f ,0.1183f ,0.0824f ,0.1139f ,0.0737f ,0.0373f ,0.0960f ,0.0804f ,0.0514f ,0.0621f ,0.1119f ,0.0705f ,0.1904f ,0.0462f ,0.0934f ,0.9762f ,0.0580f ,0.0775f ,0.0922f ,0.0652f ,0.2016f ,0.1280f ,0.1491f ,0.0439f ,0.0835f ,0.0807f ,0.1626f ,0.1273f ,0.0324f ,0.0953f ,0.1063f ,0.1366f ,0.0068f ,0.1166f ,0.0994f ,0.1284f ,0.0448f ,0.1663f ,0.0980f ,0.0454f ,0.0454f ,0.0826f ,0.0763f ,0.0878f ,0.0981f ,0.1719f ,0.1157f ,0.0568f ,0.0661f ,0.0426f ,0.0669f ,0.0759f ,0.0416f ,0.0473f ,0.1443f ,0.0990f ,0.0548f ,0.0624f ,0.1497f ,0.0283f ,0.1923f ,0.0521f ,0.0276f ,0.1606f ,0.0563f ,0.1127f ,0.0833f ,0.1208f ,0.2763f ,0.0580f ,0.0639f ,0.0681f ,0.0732f ,0.0582f ,0.0744f ,0.1996f ,0.0426f ,0.1425f ,0.1223f ,0.1580f ,0.0923f ,0.0805f ,0.0811f ,0.1722f ,0.1297f ,0.0269f ,0.2011f ,0.1350f ,0.1034f ,0.2177f ,0.1262f ,0.0203f ,0.1406f ,0.0399f ,0.1253f ,0.1096f ,0.0945f ,0.0949f ,0.1284f ,0.2215f ,0.0109f ,0.0579f ,0.0693f ,0.0565f ,0.1057f ,0.0613f ,0.0903f ,0.1362f ,0.0662f ,0.0824f ,0.1333f ,0.0477f ,0.0534f ,0.1796f ,0.0797f ,0.0431f ,0.1358f ,0.0730f ,0.1349f ,0.1051f ,0.0226f ,0.1262f ,0.1569f ,0.0517f ,0.0387f ,0.1242f ,0.1818f ,0.1696f ,0.0839f ,0.0604f ,0.1123f ,0.0276f ,0.0778f ,0.1046f ,0.0533f ,0.1316f ,0.0474f ,0.1120f ,0.1116f ,0.0398f ,0.0845f ,0.0610f ,0.0786f ,0.0702f ,0.1020f ,0.0812f ,0.0765f ,0.1223f ,0.0782f ,0.0897f ,0.0836f ,0.0111f ,0.1322f ,0.0953f ,0.0931f ,0.0656f ,0.0866f ,0.1209f ,0.0850f ,0.0051f ,0.1180f ,0.1410f ,0.1591f ,0.0850f ,0.1082f ,0.0285f ,0.0550f ,0.1007f ,0.0852f ,0.0877f ,0.0714f ,0.1403f ,0.0906f ,0.0861f ,0.0746f ,0.0308f ,0.1410f ,0.0635f ,0.0493f ,0.0382f ,0.1000f ,0.0589f ,0.2783f ,0.0341f ,0.1187f ,0.0559f ,0.1669f ,0.0669f ,0.0527f ,0.0523f ,0.1413f ,0.0165f ,0.0079f ,0.1095f ,0.1305f ,0.0324f ,0.0930f ,0.1067f ,0.0442f ,0.1239f ,0.1343f ,0.0524f ,0.2231f ,0.0665f ,0.1505f ,0.0943f ,0.0686f ,0.0766f ,0.1255f ,0.0668f ,0.0098f ,0.0485f ,0.0500f ,0.1047f ,0.1413f ,0.1021f ,0.1269f ,0.1466f ,0.0500f ,0.1030f ,0.1037f ,0.1344f ,0.0614f ,0.0672f ,0.0039f ,0.0629f ,0.1307f ,0.0333f ,0.0229f ,0.0460f ,0.1078f ,0.1387f ,0.0350f ,0.1396f ,0.0712f ,0.0494f ,0.1005f ,0.0213f ,0.0728f ,0.0529f ,0.1523f ,0.0465f ,0.0482f ,0.0751f ,0.1204f ,0.0474f ,0.0720f ,0.1283f ,0.0426f ,0.0166f ,0.1066f ,0.0994f ,0.1416f ,0.0830f ,0.0267f ,0.0378f ,0.0778f ,0.1007f ,0.0576f ,0.0242f ,0.0388f ,0.1875f ,0.1738f ,0.2227f ,0.0685f ,0.0241f ,0.0570f ,0.1179f ,0.1206f ,0.1334f ,0.0801f ,0.0512f ,0.0401f ,0.1220f ,0.1166f ,0.1067f ,0.0753f ,0.1025f ,0.0535f ,0.0552f ,0.0926f ,0.1406f ,0.0734f ,0.0480f ,0.1529f ,0.1541f ,0.0797f ,0.0522f ,0.1011f ,0.0738f ,0.0721f ,0.1031f ,0.1215f ,0.0916f ,0.0558f ,0.0780f ,0.1010f ,0.1236f ,0.1213f ,0.0624f ,0.2372f ,0.0923f ,0.0494f ,0.0595f ,0.0850f ,0.1216f ,0.0333f ,0.0950f ,0.0823f ,0.1308f ,0.1094f ,0.1251f ,0.0485f ,0.0832f ,0.1644f ,0.0752f ,0.1377f ,0.0540f ,0.1609f ,0.1049f ,0.0565f ,0.0920f ,0.0092f ,0.0840f ,0.0954f ,0.0645f ,0.0361f ,0.0640f ,0.0638f ,0.0119f ,0.0810f ,0.1090f ,0.2010f ,0.0515f ,0.0888f ,0.0318f ,0.1345f ,0.0415f ,0.1200f ,0.0694f ,0.0184f ,0.1083f ,0.0968f ,0.0972f ,0.1327f ,0.0674f ,0.1771f ,0.1515f ,0.0969f ,0.1131f ,0.0318f ,0.1093f ,0.0664f ,0.1226f ,0.1027f ,0.0884f ,0.1520f ,0.0328f ,0.0962f ,0.1157f ,0.1232f ,0.1406f ,0.0323f ,0.0515f ,0.1092f ,0.0798f ,0.0534f ,0.0634f ,0.0196f ,0.0950f ,0.1915f ,0.0876f ,0.0449f ,0.0966f ,0.0687f ,0.0819f ,0.0754f ,0.0815f ,0.1289f ,0.0462f ,0.0368f ,0.1548f ,0.0561f ,0.0993f ,0.1362f ,0.0746f ,0.1017f ,0.0024f ,0.1027f ,0.1299f ,0.0825f ,0.1162f ,0.1781f ,0.2045f ,0.0584f ,0.1089f ,0.0366f ,0.1030f ,0.0686f ,0.1835f ,0.0455f ,0.0412f ,0.0663f ,0.0626f ,0.0464f ,0.0481f ,0.0561f ,0.0568f ,0.0677f ,0.1504f ,0.0357f ,0.0252f ,0.0928f ,0.0887f ,0.0621f ,0.1002f ,0.0962f ,0.0886f ,0.0975f ,0.0879f ,0.0489f ,0.0683f ,0.1276f ,0.1207f ,0.0796f ,0.0879f ,0.0570f ,0.0634f ,0.0891f ,0.1283f ,0.0975f ,0.0306f ,0.0842f ,0.1782f ,0.1614f ,0.0915f ,0.0947f ,0.0357f ,0.0953f ,0.0662f ,0.1732f ,0.0986f ,0.1901f ,0.0842f ,0.0398f ,0.0487f ,0.0540f ,0.0997f ,0.0641f ,0.0344f ,0.0880f ,0.0792f ,0.0079f ,0.0384f ,0.0504f ,0.1501f ,0.0536f ,0.2787f ,0.0891f ,0.1291f ,0.0780f ,0.1512f ,0.0689f ,0.1732f ,0.1287f ,0.0610f ,0.0057f ,0.1142f ,0.1443f ,0.2189f ,0.0605f ,0.1136f ,0.0620f ,0.1298f ,0.0218f ,0.0749f ,0.1105f ,0.0786f ,0.0901f ,0.0943f ,0.0712f ,0.1182f ,0.1207f ,0.2293f ,0.0369f ,0.1296f ,0.1571f ,0.0702f ,0.0823f ,0.0285f ,0.1065f ,0.2052f ,0.0358f ,0.1008f ,0.0705f ,0.1101f ,0.1025f ,0.0573f ,0.0495f ,0.0325f ,0.2283f ,0.0151f ,0.1351f ,0.0704f ,0.0773f ,0.0313f ,0.1082f ,0.0897f ,0.0981f ,0.0996f ,0.1623f ,0.1808f ,0.0210f ,0.0871f ,0.1286f ,0.1502f ,0.0966f ,0.1260f ,0.1216f ,0.0267f ,0.0801f ,0.1249f ,0.1568f ,0.1159f ,0.0769f ,0.0206f ,0.0934f ,0.0141f ,0.0400f ,0.1426f ,0.0604f ,0.0249f ,0.1259f ,0.0958f ,0.0309f ,0.1669f ,0.0830f ,0.1098f ,0.0452f ,0.0706f ,0.1090f ,0.0963f ,0.0657f ,0.0659f ,0.1255f ,0.0362f ,0.1227f ,0.0722f ,0.0664f ,0.0273f ,0.1035f ,0.1763f ,0.1579f ,0.1270f ,0.0864f ,0.0533f ,0.0622f ,0.1972f ,0.1337f ,0.1226f ,0.0868f ,0.1697f ,0.0754f ,0.0627f ,0.1516f ,0.0948f ,0.0567f ,0.1263f ,0.2018f ,0.0400f ,0.0789f ,0.0508f ,0.0875f ,0.0313f ,0.0391f ,0.1180f ,0.1445f ,0.0266f ,0.1663f ,0.1360f ,0.0801f ,0.0900f ,0.1025f ,0.0663f ,0.0672f ,0.0651f };
            ArrayList<Entry> dataVals = new ArrayList<Entry>();
            for (int i=0;i<750;i++){
                dataVals.add(new Entry(o[i],p[i]));
        }

        return dataVals;
    }

    public void openBT() {

        if (bluetoothAdapter == null) {
            Log.d( "Vibro","Device doesn't support Bluetooth");

        }
        else {
            Log.d( "Vibro","Bluetooth works !!!!");
        }

        if (!bluetoothAdapter.isEnabled()) {
            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
        }

        Set<BluetoothDevice> pairedDevices = bluetoothAdapter.getBondedDevices();

        if(pairedDevices.size() > 0) {
            for(BluetoothDevice device : pairedDevices) {
                if(device.getName().equals("HC-05")) {
                    mmDevice = device;
                    break;
                }
                else {
                    Toast.makeText(this, "Device Not Found in page 1d !" , Toast.LENGTH_SHORT).show();
                }
            }
        }
    }



//    public void AcceptThread() {
//        // Use a temporary object that is later assigned to mmServerSocket
//        // because mmServerSocket is final.
//        BluetoothServerSocket tmp = null;
//
//
//        try {
//            // MY_UUID is the app's UUID string, also used by the client code.
//            tmp = bluetoothAdapter.listenUsingRfcommWithServiceRecord(BT_NAME, MY_UUID);
//        } catch (IOException e) {
//            Log.e("TAG", "Socket's listen() method failed", e);
//        }
//        mmServerSocket = tmp;
//    }
//
//    public void run() throws IOException {
//        BluetoothSocket socket = null;
//        // Keep listening until exception occurs or a socket is returned.
//        while (true) {
//            try {
//                socket = mmServerSocket.accept();
//            } catch (IOException e) {
//                Log.e("TAG", "Socket's accept() method failed", e);
//                break;
//            }
//
//            if (socket != null) {
//                // A connection was accepted. Perform work associated with
//                // the connection in a separate thread.
//                //manageMyConnectedSocket(socket);
//                mmServerSocket.close();
//                break;
//                break;
//            }
//        }
//    }
//
//    // Closes the connect socket and causes the thread to finish.
//    public void cancel() {
//        try {
//            mmServerSocket.close();
//        } catch (IOException e) {
//            Log.e("TAG", "Could not close the connect socket", e);
//        }
//    }

}
